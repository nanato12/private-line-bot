import os
from ast import Assign, Constant, Module, Name, Store

import astor

from core.base.generator import BaseGenerator

GEN_COMMENT = "# Generated by EventGenerator on {date}\n\n"


class EnvGenerator(BaseGenerator):
    type_: str

    def __init__(self, type_: str) -> None:
        self.type_ = type_

    def __ast_user(self, email: str, passwd: str) -> None:
        self.ast_body.append(
            Assign(
                targets=[Name(id="LINE_PRIVATE_BOT_EMAIL", ctx=Store())],
                value=Constant(value=email),
            )
        )
        self.ast_body.append(
            Assign(
                targets=[Name(id="LINE_PRIVATE_BOT_PASSWORD", ctx=Store())],
                value=Constant(value=passwd),
            ),
        )

    def __create_ast_module(self, email: str, passwd: str) -> Module:
        """create ast module

        Returns:
            Module: ast module
        """

        self.ast_body = []
        self.__ast_user(email, passwd)
        return Module(body=self.ast_body, type_ignores=[])

    def generate(self) -> None:
        """generate env file"""

        if (output_dir := os.environ.get("ENV_OUTPUT_PATH")) is None:
            raise Exception("ENV_OUTPUT_PATH is none.")

        os.makedirs(output_dir, exist_ok=True)

        if self.type_ == "init":
            user_name = input("input email >>> ")
            password = input("input password >>> ")
            ast_module = self.__create_ast_module(user_name, password)

        elif self.type_ == "new":
            ast_module = self.__create_ast_module(
                "INPUT YOUR LINE EMAIL", "INPUT YOUR LINE PASSWORD"
            )
        else:
            raise Exception(f"Invalid argument: {self.type_}")

        file_name = f"{output_dir}/.env"
        if (
            os.path.exists(file_name)
            and input("\nAlready exists env file.\n overwrite '.env' ? [Y/n] ") != "Y"
        ):
            print("\n.env file generate cancel.")
        else:
            with open(file_name, "w") as cmd_py_file:
                cmd_py_file.write(astor.to_source(ast_module))
            print(f"Generate success! {file_name}")
