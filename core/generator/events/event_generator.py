import os
from ast import (
    AnnAssign,
    Attribute,
    Compare,
    Constant,
    Eq,
    Expr,
    FunctionDef,
    If,
    ImportFrom,
    IsNot,
    Load,
    Module,
    Name,
    Return,
    Store,
    Subscript,
    alias,
    arg,
    arguments,
)
from datetime import datetime

import astor

from core.base.generator import BaseGenerator
from core.enum.op_types import OpType

GEN_COMMENT = "# Generated by EventGenerator on {date}\n\n"


class EventGenerator(BaseGenerator):
    op: OpType
    op_no: str

    def __init__(self, op_no: str) -> None:
        try:
            self.op_no = op_no
            self.op = OpType(int(op_no))
        except ValueError:
            raise Exception(f"Not found operation: {op_no}")

    def __ast_import_from(self) -> None:
        """append ImportFrom to ast body"""

        self.ast_body.append(
            ImportFrom(module="typing", names=[alias(name="Optional")], level=0)
        )
        self.ast_body.append(
            ImportFrom(
                module="akad.ttypes",
                names=[
                    alias(name="Message"),
                    alias(name="MIDType"),
                    alias(name="Operation"),
                ],
                level=0,
            )
        )
        self.ast_body.append(
            ImportFrom(module="line", names=[alias(name="LINE")], level=0)
        )

    def __ast_function_def(self) -> None:
        """append ClassDef to ast body"""

        self.ast_body.append(
            FunctionDef(
                name=self.op.name,
                args=arguments(
                    posonlyargs=[],
                    args=[
                        arg(arg="bot", annotation=Name(id="LINE", ctx=Load())),
                        arg(arg="op", annotation=Name(id="Operation", ctx=Load())),
                    ],
                    kwonlyargs=[],
                    kw_defaults=[],
                    defaults=[],
                ),
                body=[
                    Expr(
                        value=Constant(
                            value=f"Operation No: {self.op_no}\n\n    Args:\n        bot (LINE): LINE Client\n        op (Operation): Operation\n    "
                        )
                    ),
                    AnnAssign(
                        target=Name(id="message", ctx=Store()),
                        annotation=Subscript(
                            value=Name(id="Optional", ctx=Load()),
                            slice=Name(id="Message", ctx=Load()),
                            ctx=Load(),
                        ),
                        value=Attribute(
                            value=Name(id="op", ctx=Load()), attr="message", ctx=Load()
                        ),
                        simple=1,
                    ),
                    If(
                        test=Compare(
                            left=Name(id="message", ctx=Load()),
                            ops=[IsNot()],
                            comparators=[Constant(value=None)],
                        ),
                        body=[
                            If(
                                test=Compare(
                                    left=Attribute(
                                        value=Name(id="message", ctx=Load()),
                                        attr="toType",
                                        ctx=Load(),
                                    ),
                                    ops=[Eq()],
                                    comparators=[
                                        Attribute(
                                            value=Name(id="MIDType", ctx=Load()),
                                            attr="ROOM",
                                            ctx=Load(),
                                        )
                                    ],
                                ),
                                body=[
                                    AnnAssign(
                                        target=Name(id="to", ctx=Store()),
                                        annotation=Name(id="str", ctx=Load()),
                                        value=Attribute(
                                            value=Name(id="message", ctx=Load()),
                                            attr="to",
                                            ctx=Load(),
                                        ),
                                        simple=1,
                                    )
                                ],
                                orelse=[
                                    If(
                                        test=Compare(
                                            left=Attribute(
                                                value=Name(id="message", ctx=Load()),
                                                attr="toType",
                                                ctx=Load(),
                                            ),
                                            ops=[Eq()],
                                            comparators=[
                                                Attribute(
                                                    value=Name(
                                                        id="MIDType", ctx=Load()
                                                    ),
                                                    attr="GROUP",
                                                    ctx=Load(),
                                                )
                                            ],
                                        ),
                                        body=[
                                            AnnAssign(
                                                target=Name(id="to", ctx=Store()),
                                                annotation=Name(id="str", ctx=Load()),
                                                value=Attribute(
                                                    value=Name(
                                                        id="message", ctx=Load()
                                                    ),
                                                    attr="to",
                                                    ctx=Load(),
                                                ),
                                                simple=1,
                                            )
                                        ],
                                        orelse=[
                                            If(
                                                test=Compare(
                                                    left=Attribute(
                                                        value=Name(
                                                            id="message", ctx=Load()
                                                        ),
                                                        attr="toType",
                                                        ctx=Load(),
                                                    ),
                                                    ops=[Eq()],
                                                    comparators=[
                                                        Attribute(
                                                            value=Name(
                                                                id="MIDType", ctx=Load()
                                                            ),
                                                            attr="USER",
                                                            ctx=Load(),
                                                        )
                                                    ],
                                                ),
                                                body=[
                                                    AnnAssign(
                                                        target=Name(
                                                            id="to", ctx=Store()
                                                        ),
                                                        annotation=Name(
                                                            id="str", ctx=Load()
                                                        ),
                                                        value=Attribute(
                                                            value=Name(
                                                                id="message", ctx=Load()
                                                            ),
                                                            attr="_from",
                                                            ctx=Load(),
                                                        ),
                                                        simple=1,
                                                    )
                                                ],
                                                orelse=[Return()],
                                            )
                                        ],
                                    )
                                ],
                            )
                        ],
                        orelse=[],
                    ),
                ],
                decorator_list=[],
                returns=Constant(value=None),
            ),
        )

    def __create_ast_module(self) -> Module:
        """create ast module

        Returns:
            Module: ast module
        """

        self.ast_body = []
        self._ast_add_license()
        self.__ast_import_from()
        self.__ast_function_def()
        return Module(body=self.ast_body, type_ignores=[])

    def generate(self) -> None:
        """generate event py file"""

        if (output_dir := os.environ.get("EVENT_OUTPUT_PATH")) is None:
            raise Exception("EVENT_OUTPUT_PATH is none.")

        os.makedirs(output_dir, exist_ok=True)

        file_name = f"{output_dir}/{self.op.name}.py"
        if os.path.exists(file_name):
            raise Exception(f"already exists event: {self.op.name}")

        with open(file_name, "w") as cmd_py_file:
            cmd_py_file.write(
                GEN_COMMENT.format(date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                + astor.to_source(self.__create_ast_module())
            )
        print(f"Generate success! {file_name}")
